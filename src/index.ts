import { GraphQLSchema } from "graphql";
import { format } from "prettier";
import {
  PluginFunction,
  PluginValidateFn,
  Types,
} from "@graphql-codegen/plugin-helpers";
import { generateFragments } from "./generate-fragments";
import { generateMutations } from "./generate-mutations";
import { generateQueries } from "./generate-queries";
import { generateSubscriptions } from "./generate-subscriptions";
import { GeneratorKind, GraphqlDocumentsConfig } from "./generator-types";

const defaultFragmentExcludeSuffixes = [
  "_aggregate",
  "_aggregate_fields",
  "_avg_fields",
  "_max_fields",
  "_min_fields",
  "_stddev_fields",
  "_stddev_pop_fields",
  "_stddev_samp_fields",
  "_sum_fields",
  "_var_pop_fields",
  "_var_samp_fields",
  "_variance_fields",
];
const defaultMutationExcludeArgKeys = ["onConflict"];

function check(
  generatorKind: GeneratorKind | GeneratorKind[],
  against: GeneratorKind
): boolean {
  if (Array.isArray(generatorKind)) {
    return (
      generatorKind.includes(against) || generatorKind.includes("all_documents")
    );
  }
  return generatorKind === against || generatorKind === "all_documents";
}

export const plugin: PluginFunction<GraphqlDocumentsConfig> = async (
  schema: GraphQLSchema,
  documents: Types.DocumentFile[],
  config: GraphqlDocumentsConfig
) => {
  const kind = config.kind;
  const excludeSuffixes = config.excludeSuffixes
    ? config.excludeSuffixes
    : defaultFragmentExcludeSuffixes;
  const excludeArgKeys = config.excludeArgKeys
    ? config.excludeArgKeys
    : defaultMutationExcludeArgKeys;

  let graphqlOutput = `# THIS FILE HAS BEEN AUTO-GENERATED\n# DO NOT EDIT THIS FILE DIRECTLY\n\n`;
  if (check(kind, "fragments")) {
    graphqlOutput += generateFragments(schema, { ...config, excludeSuffixes });
  }
  if (check(kind, "queries")) {
    graphqlOutput += generateQueries(schema, { ...config, excludeSuffixes });
  }
  if (check(kind, "subscriptions")) {
    try {
      graphqlOutput += generateSubscriptions(schema, config);
    } catch (error) {
      // no subscriptions
    }
  }
  if (check(kind, "mutations")) {
    try {
      graphqlOutput += generateMutations(schema, {
        ...config,
        excludeSuffixes,
        excludeArgKeys,
      });
    } catch (error) {
      // no mutations
    }
  }
  graphqlOutput = await format(graphqlOutput, { parser: "graphql" });

  return graphqlOutput;
};
